{"version":3,"sources":["logo.svg","components/PicCard/PicCard.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PicCard","props","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","landmarks","clickedArray","topScore","score","message","shakeit","shuffledArray","shuffleArray","setState","includes","concat","landmarksArray","i","length","j","Math","floor","random","logo","this","map","picture","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sqDAAAA,EAAOC,QAAU,IAA0B,kC,kPCW5BC,G,YARC,SAAAC,GAAK,OACjB,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,+BAA+BC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,aAAaP,EAAMQ,WCAtHC,G,MAHC,SAAAT,GAAK,OAAI,yBAAKC,UAAiC,SAArBD,EAAMU,aAAwB,eAAiB,WAAYV,EAAMW,Y,OC0E5FC,E,2MApEbC,MAAQ,CACNC,YACAC,aAAa,GACbC,SAAU,EACVC,MAAO,EACPC,QAAS,GACTC,QAAS,S,EAGXZ,aAAe,SAAAC,GACb,IAAMY,EAAgB,EAAKC,aAAaP,GACxC,EAAKQ,SAAS,CAACR,UAAWM,IACtB,EAAKP,MAAME,aAAaQ,SAASf,GACnC,EAAKc,SAAS,CAAEL,MAAO,EAAGF,aAAc,GAAIG,QAAS,mDAAoDC,QAAQ,SAEjH,EAAKG,SAAS,CACZP,aAAc,EAAKF,MAAME,aAAaS,OAAO,CAAChB,IAC9CS,MAAO,EAAKJ,MAAMI,MAAO,EACzBC,QAAS,yBACTC,QAAS,UAGT,EAAKN,MAAMI,MAAQ,EAAKJ,MAAMG,UAChC,EAAKM,SAAS,CAAEN,SAAU,EAAKH,MAAMI,S,EAGvCI,aAAe,SAACI,GACd,IAAK,IAAIC,EAAID,EAAeE,OAAQ,EAAGD,EAAI,EAAGA,IAAK,CACjD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADO,EAER,CAACD,EAAeG,GAAIH,EAAeC,IAA3ED,EAAeC,GAFiC,KAE7BD,EAAeG,GAFc,KAInD,OAAOH,G,wEAED,IAAD,OACT,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKG,IAAK4B,IAAM/B,UAAU,WAAWC,IAAI,SACzC,wBAAID,UAAY,aAAhB,8CAEF,4BACE,4BAAQA,UAAW,eAAnB,8GACA,uBAAGA,UAAY,SAAQ,0CAAgBgC,KAAKpB,MAAMI,MAA3B,gBAA+CgB,KAAKpB,MAAMG,WACjF,uBAAGf,UAAY,WAAU,gCAASgC,KAAKpB,MAAMK,WAE/C,kBAAC,EAAD,CACAR,aAAgBuB,KAAKpB,MAAMM,QAC3BR,SACCsB,KAAKpB,MAAMC,UAAUoB,KAAI,SAAAC,GAAO,OAC/B,kBAAC,EAAD,CACA5B,aAAgB,EAAKA,aACrBC,GAAI2B,EAAQ3B,GACZ4B,IAAOD,EAAQ3B,GACfL,KAAQgC,EAAQhC,KAChBE,MAAS8B,EAAQ9B,aAInB,4BAAQJ,UAAY,UAClB,yBAAKA,UAAY,aACf,0BAAMA,UAAU,cAAhB,4B,GA9DQoC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.45b80dc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./PicCard.css\";\n\nconst PicCard = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\n        </div>\n    </div>\n);\n\nexport default PicCard;\n","import React from \"react\";\nimport \"./Wrapper.css\"\n\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\n\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PicCard from \"./components/PicCard/PicCard.js\";\nimport Wrapper from \"./components/Wrapper/Wrapper.js\";\nimport landmarks from \"./landmarks.json\";\n\nclass App extends Component {\n\n  state = {\n    landmarks,\n    clickedArray:[],\n    topScore: 0,\n    score: 0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n\n  clickPicture = id => {\n    const shuffledArray = this.shuffleArray(landmarks);\n    this.setState({landmarks: shuffledArray});\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"Wrong! Game Over. Click an image to start again!\", shakeit:\"true\"});\n    } else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score +1,\n        message: \"You Guessed Correctly!\",\n        shakeit: \"false\"\n      });\n    }\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n  }\n    shuffleArray = (landmarksArray) => {\n      for (let i = landmarksArray.length -1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [landmarksArray[i], landmarksArray[j]] = [landmarksArray[j], landmarksArray[i]];\n      }\n      return landmarksArray;\n    }\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className = \"App-title\">Welcome To The Clicky Game Made By React!</h1>\n      </header>\n      <h3>\n        <strong className= \"instruction\">Click on a different image every time to earn points, game is over when you click on the same image twice!</strong>\n        <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\n        <p className = \"message\"><strong>{this.state.message}</strong></p>\n      </h3>\n      <Wrapper\n      shakeWrapper = {this.state.shakeit}\n      pictures = \n      {this.state.landmarks.map(picture => (\n        <PicCard\n        clickPicture = {this.clickPicture}\n        id={picture.id}\n        key = {picture.id}\n        name = {picture.name}\n        image = {picture.image}\n        />\n      ))}\n      />\n      <footer className = \"footer\">\n        <div className = \"container\">\n          <span className=\"text-muted\">Â© Turan Ketene</span>\n        </div>\n      </footer>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}